Реализация булева поиска по статьям с Ленты ру.

Ссылка на документы - https://cloud.mail.ru/public/FnMq/qCNif6bFG/dataset/

Была реализована выкачка документов(сопоставление urlам документов уникальных doc_id, лемматизация слов, удаление стоп слов),затем по данным документам составлялся прямой индекс.
После чего прямой индекс оптимизировался(собирались уникальные слова, в пару к которым добавлялась их встречаемость в документе.
По прямому индексу составлялся словарь и обратный индекс(doc_id сразу в отсортированном порядке). Словарь представляет из себя простенькое префиксное дерево, в узлах которого хранятся id слов, закодированные по Фибоначчи).
Потом прямой индекс 'дооптемизировался'(собирал слова в строку и кодировал utf-8, частоты слов, собирал в массив и кодировал Фибоначчи).
Затем оптимизировался обратный индекс(сортировал doc_id, затем вводил промежутки вместо самих doc_id, которые затем кодировались Фибоначчи).
Поисковый запрос должен иметь вид Булева запроса, обрабатываюся любые логические выражение, которые могут включать:
! - отрицание(должно стоять перед отрицаемым выражением без пробела), 
Скобки () ,
Дизъюнкция |  и конъюнкция & со словами(можно с пробелами и без),
Слова заменялись на них самих и их синонимы(обученная на википедии модель word2vec, между словами-синонимами стоит | дизъюнкция).
Если присутствовало отрицание - постинг лист слова заменялся на инвертированный постинг лист.
Обработка дерева запроса потоковая. 
FibCoder.py - кодировка Фибоначчи.
Index_with_dict - библиотека для составления и оптимизации словаря, прямого и обратного индексов. 
searcher.py - исполнение поискового запроса из текстового файла request.txt и загрузка полученных ссылок в документ search_result.txt,
make_index_with_dict - составления и оптимизация словаря и прямого с обратным индексом.
Их аналоги с суффиксом _sh - скрипты формата.sh.
Сначала надо выполнить  make_index_with_dict.py, затем  searcher.py, передача индексов и словаря происходит с помощью pickle.
